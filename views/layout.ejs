<!DOCTYPE html>
<html>
  <head>
    <title>OMAHA</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/min/production.min.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  </head>

  <body>
<!--   <header>
    <div class="mygroup">
      <a href="/mygroup"> My Group </a>
    </div>
    <div class="logout">
      <a href="/logout">Logout</a>
    </div>    
  </header> -->

<% if (req.path != '/') { %>
    <div class='ui grey massive inverted menu'>
      <!-- <% if (req.session.me != undefined) { %> -->
        <!-- <a class='item' href="/gotoDash"> -->
          <!-- <span class="glyphicon glyphicon-home"></span>&nbsp; -->
        <!-- </a> -->
     <!-- <% } %> -->

      <div class='right menu'>
          <% if (req.session.me != undefined) { %>
              <a class='item' href='/mygroup'>
                <span class="glyphicon glyphicon-list-alt"></span>&nbsp;
                My Group
              </a>

              <a class='item' href="/logout">
                <span class="glyphicon glyphicon-log-out"></span>&nbsp;
                Logout
              </a>
          <% } %>
            </div>
    </div>
  <% } %>

    <%- body %>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <script src="https://code.jquery.com/jquery-2.2.3.min.js"></script>
    <!-- <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js"></script> -->
    <!-- <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-resource.js"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-animate.min.js"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-moment/0.10.3/angular-moment.min.js"></script> -->
    <!--SCRIPTS-->
    <script src="/min/production.min.js"></script>
    <!--SCRIPTS END-->

    <footer>
      <div class="footnote">
        <h4>Developed By WSDC.</h4>
      </div>
    </footer>
    
  </body>

<script type="text/javascript">

 function ShowFloors(hostel, hostelsfromcon) {
    var objFloor = document.getElementById("floor");
    objFloor.options.length = 0;
    objFloor.disabled = false;

    objFloor.options.add(new Option("Select Block and Floor"));

    for(var i in hostelsfromcon) 
    { 
      for(var j in hostelsfromcon[i])
      {
        for(var k in hostelsfromcon[i][j][1])
        {
            console.log(hostelsfromcon[i][j][1][k].name + " is but " + hostel.value);
          if(hostelsfromcon[i][j][1][k].name.trim() == hostel.value)
          {
            console.log(hostelsfromcon[i][j][1][k].block + " is ");
            var name = "";
            name = name + "BLOCK : " +  hostelsfromcon[i][j][1][k].block + " , " + "FLOOR : " + hostelsfromcon[i][j][1][k].floor;
            objFloor.options.add(new Option(name));
          }
        }
      } 
    }
};
 
 
function thisroomismine(roomno){
    console.log("KGFJH");

    $.ajax({

        type: "GET",
        url: "http://wsdc.nitw.ac.in:9000/rooms",
        dataType: "json",
        data: {roomno: roomno}
    }).done(function(resu) {

            if(resu[0].allotted == 0)
            {


                window.location.href = "/book/"+roomno;
            }
            else
            {
                alert("Already booked");
            }
    });
  };

function showRooms(hostelfloor){
  var final ={};
  var str = hostelfloor.value.split(' ');
  var host = document.getElementById("hostel");
  final.name = host.options[host.selectedIndex].text;
  final.block = str[2];
  final.floor = str[6];

  if(final.block == "null")
    final.block = null;

  var availrooms = [];

    $.ajax({
        type: "GET",
        url: "http://wsdc.nitw.ac.in:9000/hostel",
        dataType: "json",
        data: {name: final.name}
     }).done(function(resu)
        {

               $.ajax({
                type: "GET",
                url: "http://wsdc.nitw.ac.in:9000/hostelfloors",
                dataType: "json",
                data: {hostel: resu[0].id, block: final.block, floor: final.floor}
            }).done(function(resu2) {

        
                $.ajax({
                    type: "GET",
                    url: "http://wsdc.nitw.ac.in:9000/rooms",
                    dataType: "json",
                    data: {hostelfloors: resu2[0].id, allotted: 0, conditionid: 1}
                }).done(function(resu3) {

            
                    $('#roomsdiv').empty();
                    for(var i = 0; i < resu3.length; i++)
                    {
                        console.log(resu3[i].roomno);
                        $('#roomsdiv').append("<div class='col-sm-2' style='margin-top: 20px;'> <button class='ui small black button' onclick=\"thisroomismine('" + resu3[i].roomno + "');\">" + resu3[i].roomno + "</button> </div>");
                    }  
                });
            });
        });
};
 
</script> 
  
</html>